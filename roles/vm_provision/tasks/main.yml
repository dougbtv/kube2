---
- name: Copy local ssh public key to virthost if reusing a local key.
  copy:
    src: "{{ use_local_sshkey_path }}"
    dest: "{{ ssh_pub_key }}"
  when: use_local_sshkey_path is defined

- name: copy modules
  copy:
    src: "{{ role_path }}/files/modules"
    dest: "{{ terraform_workdir }}"
    mode: 0755
  tags: vm_create

- name: generate main.tf
  template:
    src: main.tf.j2
    dest: "{{ terraform_workdir }}/main.tf"
    mode: 0644
  tags: vm_create

- name: check if libvirt default storage pool exists with virsh
  shell: |
    virsh pool-list --all | grep -P "^ default"
  ignore_errors: true
  register: virsh_pool_list
  tags: vm_create

- name: copy libvirt default storage pool xml
  copy:
    src: "{{ role_path }}/files/libvirt_default_pool.xml"
    dest: "/tmp/libvirt_default_pool.xml"
    mode: 0755
  tags: vm_create
  when: virsh_pool_list.rc > 0

- name: define libvirt default storage pool
  shell: |
    virsh pool-define /tmp/libvirt_default_pool.xml
  tags: vm_create
  when: virsh_pool_list.rc > 0

- name: start storage pool
  shell: |
    virsh pool-start default;
    virsh pool-autostart default
  tags: vm_create
  when: virsh_pool_list.rc > 0 or "inactive" in virsh_pool_list.stdout

- name: setup vm
  terraform:
    project_path: "{{ terraform_workdir }}"
    binary_path: "{{ terraform_workdir }}/terraform"
    state: present
    parallelism: 20
    force_init: true
  tags: vm_create

- name: get vm ips
  shell: "set -o pipefail; ./terraform output -json | jq 'map_values(.value[0])'"
  args:
    chdir: "{{ terraform_workdir }}"
  changed_when: False
  register: host_ips_out

- name: convert ips output to ansible fact
  set_fact:
    host_ips: "{{ host_ips_out.stdout | from_json }}"

- name: Validate our inventory directory exists
  file:
    path: "{{ playbook_dir }}/inventory/"
    state: directory
  delegate_to: 127.0.0.1

- name: Build a local inventory
  template:
    src: vms.local.j2
    dest: "{{ playbook_dir }}/inventory/vms.local.generated"
    mode: 0644
  delegate_to: 127.0.0.1

- name: create ssh conf directory
  file:
    path: "{{ ansible_env.HOME }}/.ssh/conf.d"
    state: directory
    owner: "{{ ansible_env.USER }}"
    group: "{{ ansible_env.USER }}"
    mode: '0700'
  delegate_to: 127.0.0.1
  when: ssh_proxy_command is not defined

- name: create ssh config file
  template:
    src: kube_hosts.j2
    dest: "{{ ansible_env.HOME }}/.ssh/conf.d/kube_hosts"
    mode: '0600'
  delegate_to: 127.0.0.1
  when: ssh_proxy_command is not defined
